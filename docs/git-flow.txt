Source:
We can use simplified git-workflow which is mentioned here
  http://nvie.com/posts/a-successful-git-branching-model/
The approach I am describing below is what I think will 
suffice our needs and is simple enough. 
Please feel free to make any suggesions.

There are basically 3 types of remote branches at any time.

1. master : Contains only stable versions. We can easily revert
            back to old stable version if anything goes wrong
            in latest release.
2. dev :   State with the latest delivered development changes for the next
           release.

3. Support branches (Temporary) 
  feature-tag : temaporary branch for any feature to be developed.
  hotfix-tag : branch to fix some bug in the prod.

WORKFLOW :

** New feature development
1. Branch off from master or dev branch.
2. Create a temporary <feature-tag> branch for development.
3. When done with new feature, checkout to <dev> branch and pull in 
   changes,if any, from other developers.
4. Merge <feature-tag> into <dev>, resolve conflicts if any. Test it.
5. Create pull request to get merged in <master>, get code reviewed.
6. Merge latest commit from <dev> to <master>.
7. Delete <feature-tag> branch

** Urgent hot-fix bugs (Only critical bugs from PROD)
1. create a <hotfix-tag> branch off from <master>.
2. Fix the bug and test it.
3. Raise pull-request, code review and then merge in <master>
4. Delete the <hotflix-tag> branch

NOTE :
  use git merge --no-ff <feature-tag> to merge the branches.

